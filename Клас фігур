#include <iostream>
#include <string>
#include <math.h>
#include <vector>

using namespace std;

class Figure {
 
    public:
 
        virtual double calc_area() const = 0;
        virtual double calc_perimeter() const = 0;
        virtual vector<double> calc_specdot() const = 0;
        virtual string calc_type() const = 0;
        virtual string calc_vyp()  const = 0;
};

int calculate_triangle (int x, int x0, int x1, int y, int y0, int y1)
{
	return  (x - x0) * (y1 - y0) - (y - y0) * (x1 - x0);
} 

bool riv(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4,int x5,int y5)
{
  double a,b,c,t1,t2,t3;
  bool dat,dat1,dat2,dat3;
  
  a = y1 - y2;
  b = x2 - x1;
  c = x1*y2 - x2*y1;

  t1 = a*x3+b*y3+c;
    if(t1 < 0) dat1 = 0;
       else if(t1 > 0) dat1 = 1;
  t2 = a*x4+b*y4+c;
     if(t2 < 0) dat2 = 0;
        else if(t2 > 0) dat2 = 1;
  t3 = a*x5+b*y5+c;
     if(t3 < 0) dat3 = 0;
        else if(t3 > 0) dat3 = 1;

  if(dat1 == dat2 == dat3) dat = 1;
    else dat = 0;
  return dat;

}
 
class Triangle: public Figure { 
 
    private:
 
        double x1,y1,x2,y2,x3,y3;
 
    public:
 
 
        double calc_area() const
      {
            double s = fabs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2.0;
            return s;
        }
 
        double calc_perimeter() const {
            double p;
            p =sqrt(pow(x2-x1,2)+pow(y2-y1,2)) + sqrt(pow(x3-x1,2)+pow(y3-y1,2)) + sqrt(pow(x3-x2,2)+pow(y3-y2,2));
            return p;
        }
        string calc_type() const
        {
          int t,a,b,c;
          string s;
          a = sqrt(pow((x1-x2),2)+pow((y1-y2),2));
          b = sqrt(pow((x2-x3),2)+pow((y2-y3),2));
          c = sqrt(pow((x1-x3),2)+pow((y1-y3),2));
          
          	if (a<=b+c && b<=a+c && c<=b+a)
	      {
		     if (a==b+c || b==c+a || c==a+b || a==0 || b==0 || c==0)
			      t = 1;
	  	   else if (a==b && b==c && c==a)
            t = 2;
	  	   else if (a==b ^ b==c ^ c==a)
            t = 3;
	  	  else t = 4;
	      }
	      else t = 0;
          if(t == 1)
          {
            s = "Трикутник нульової площі";
          }
          else if(t == 2)
          {
            s = "Рівностороній";
            
          }
           else if(t == 3)
          {
            s = "Рівнобедрений";
          }
          else if(t == 4)
          {
            s = "Різностороній";
          }
          else if(t == 0)
          {
            s = "Не трикутник";
          }
          return s;
        }

         vector<double> calc_specdot() const 
         {
            vector<double> m;
            double xm, ym;
            double d = 2*(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2));
            xm = ((x1*x1 + y1*y1)*(y2-y3) + (x2*x2 + y2*y2)*(y3-y1) + (x3*x3 + y3*y3)*(y1-y2))/d;
            ym = ((x1*x1 + y1*y1)*(x3-x2) + (x2*x2 + y2*y2)*(x1-x3) + (x3*x3 + y3*y3)*(x2-x1))/d;
            m.push_back(xm);
            m.push_back(ym);
            cout << "Центр вписаного кола ";
            return m;
          }
         string calc_vyp() const{
           string s;
           s = "Опуклий";
           return s;
         }

        Triangle(double x1, double y1, double x2,double y2,double x3,double y3)
            : x1(x1), y1(y1), x2(x2), y2(y2),x3(x3),y3(y3) {}
};
 
class Circle: public Figure { 
 
    private:
 
    double x,y,r;
 
    public:
 
 
        double calc_area() const 
        {  
          double s;
           s = M_PI * r * r;
           return s;
        }
 
        double calc_perimeter() const 
        {   
            double p;
            p = 2 * M_PI * r;
            return p;
        }
        vector<double> calc_specdot() const 
         {
           vector<double> m;
           m.push_back(x);
           m.push_back(y);
           cout << "Центр кола ";
           return m;
         }
        string calc_type() const 
        {
          string s;
          s = "Коло";
          return s;
        }
         string calc_vyp()  const 
         {
           string s;
           s = "Опуклий";
           return s;
         }
 
        Circle(double x,double y,double radius)
            : x(x),y(y),r(radius) {}
};
 
class Parallelogram: public Figure {
 
    private:
        
        double xa,ya,xb,yb,xc,yc,xd,yd;
        
    public:
  
     double calc_area()  const
     {
       double S;
       S = (abs((xa-xb)*(ya+yb)+(xb-xc)*(yb+yc)+(xc-xd)*(yc+yd)+(xd-xa)*(yd+ya)))/2;
       return S;
     }
     double calc_perimeter() const
     {
       double a , b , c , d;
          a = sqrt(pow((xa-xb),2)+pow((ya-yb),2));
          b = sqrt(pow((xb-xc),2)+pow((yb-yc),2));
          c = sqrt(pow((xc-xd),2)+pow((yc-yd),2));
          d = sqrt(pow((xd-xa),2)+pow((yd-ya),2));
        double per = a+b+c+d;
        return per;
     }
      string calc_type() const
    {
      string s;
      int t = 0;
      long double l= abs(sqrt((xc - xa) * (xc - xa) + (yc - ya) * (yc -ya)));
      long double m= abs(sqrt((xd - xb) * (xd - xb) + (yd - yb) * (yd -yb)));
      if (((xc - xb) * (yd - ya) == (xd - xa) * (yc - yb)) || ((xb - xa) * (yc - yd) == (xc - xd) * (yb - ya))) 
      { 
        if (((xb - xa) * (yc - yd) == (xc - xd) * (yb - ya)) && ((xc - xb) * (yd - ya) == (xd - xa) * (yc - yb))) 
            if (l==m)
            { 
                t = 1;
            }
              else {
                  t = 2;
              }
          else {
              t = 3;
          }
      }
      else {
          t = 4;
      }
          if(t == 1)
          {
            s = "Прямокутник";
          }
          else if(t == 2)
          {
            s = "Паралелограмм";           
          }
           else if(t == 3)
          {
            s = "Трапеція";
          }
          else if(t == 4)
          {
            s = "Довільний чоририкутник";
          }
      return s;
        }
      vector<double> calc_specdot() const
      {
        float n;
        double a = 0,b = 0;
        vector<double> m;
        if (yc - ya != 0) 
        {  
        float q = (xc - xa) / (ya - yc);   
        float sn = (xb - xd) + (yb - yd) * q; 
        float fn = (xb - xa) + (yb - ya) * q;   
        n = fn / sn;
        }
         else {
           if (!(yb - yd))
           n = (yc - ya) / (yc - yd);   
    }
       a = xb + (xd - xb) * n; 
       b = yb + (yd - yb) * n;
      m.push_back(a);
      m.push_back(b);
      cout << "Центр Перетину діагоналей ";
      return m;
      
   }

    string calc_vyp() const
{
     string s;
     double	l = calculate_triangle(xc,xb,xa,yc,yb,ya);
	   double  m = calculate_triangle(xd,xb,xa,yd,yb,ya);
	    if (l * m < 0) {
		  s ="Не опуклий";
      return s;

	}
	double q,w;
	q = calculate_triangle(xa,xc,xb,ya,yc,yb);
	w = calculate_triangle(xd,xc,xb,yd,yc,yb);
	if (q * w < 0) 
  {
		s = "Не опуклий";
    return s;
	}
	double p,r;
	p = calculate_triangle(xa,xd,xc,ya,yd,yc);
	r = calculate_triangle(xb,xd,xc,yb,yd,yc);
	if (p * r < 0) {
		s ="Не опуклый";
    return s;
	}
	double j,k;
	j = calculate_triangle(xb,xa,xd,yb,ya,yd);
	k = calculate_triangle(xc,xa,xd,yc,ya,yd);
	if (j * k < 0) {
		s = "Не опуклый";
    return s;
	}
 
	s = "Опуклый";
  return s;
}
      
      
   Parallelogram(double a, double b, double c, double d, double e, double f, double g, double h)
            : xa(a),ya(b), xb(c),yb(d),xc(e),yc(f),xd(g),yd(h)  {}
  

};
class Pkutnuk: public Figure {
 
    private:
        double xa,ya,xb,yb,xc,yc,xd,yd,xe,ye;
        
    public:
  
     double calc_area()  const
     {
       double S;
       S = (abs((xa-xb)*(ya+yb)+(xb-xc)*(yb+yc)+(xc-xd)*(yc+yd)+(xd-xe)*(yd+ye)+(xe-xa)*(ye-ya)))/2;
       return S;
     }
    double calc_perimeter() const
     {
       double a , b , c , d , e;
          a = sqrt(pow((xa-xb),2)+pow((ya-yb),2));
          b = sqrt(pow((xb-xc),2)+pow((yb-yc),2));
          c = sqrt(pow((xc-xd),2)+pow((yc-yd),2));
          d = sqrt(pow((xd-xe),2)+pow((yd-ye),2));
          e = sqrt(pow((xe-xa),2)+pow((ye-ya),2));
        double per = a+b+c+d+e;
        return per;
     }
      string calc_type() const
    {
      string s;
       s = "П'ятикутник";
      return s;
      }
 
        
      vector<double> calc_specdot() const
      {
        double xm = 0,ym = 0;
        vector<double> m;
        xm = (xa+xb+xc+xd+xe)/5;
        ym = (ya+yb+yc+yd+ye)/5;
        m.push_back(xm);
        m.push_back(ym);
        cout << "Центр мас п'ятикутника ";
        return m;
      }
    string calc_vyp() const
     { 
       bool a,b,c,d,e;
       string s;

       if(riv(xa,ya,xb,yb,xc,yc,xd,yd,xe,ye) == riv(xb,yb,xa,ya,xc,yc,xd,yd,xe,ye) == riv(xc,yc,xb,yb,xa,ya,xd,yd,xe,ye) == 
       riv(xd,yd,xb,yb,xc,yc,xa,ya,xe,ye) == riv(xe,ye,xb,yb,xc,yc,xd,yd,xa,ya))
       {
         s ="Опуклий";
       }
       else s = "Не опуклий";
       return s;
    }
      
      
   Pkutnuk(double a, double b, double c, double d, double e, double f, double g, double h,double i,double j)
            : xa(a),ya(b), xb(c),yb(d),xc(e),yc(f),xd(g),yd(h),xe(i),ye(j)  {}
  

};

class Check
{
   public:

Figure* insert(Figure* figur)
{
       double x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;

    cout << "*==================*" << endl;
    cout << "*l Оберіть фігуру l*" << endl;
    cout << "*==================*" << endl;
    cout << "*l 1.Трикутник    l*" << endl;
    cout << "*l 2.Чотирикутник l*" << endl;
    cout << "*l 3.П'ятикутник  l*" << endl;
    cout << "*l 4.Коло         l*" << endl;
    cout << "*==================*" << endl;
    cout << "Оберіть - ";
    int x;
    cin >> x;

      if ( x == 1)
                {
                  cout << "Введіть координати трьох точок"<<endl;
                  cout << "Введіть x1 ="; cin >> x1;cout <<endl;
                  cout << "Введіть y1 ="; cin >> y1;cout <<endl;
                  cout << "Введіть x2 ="; cin >> x2;cout <<endl;
                  cout << "Введіть y2 ="; cin >> y2;cout <<endl;
                  cout << "Введіть x3 ="; cin >> x3;cout <<endl;
                  cout << "Введіть y3 ="; cin >> y3;cout <<endl;
                       figur = new Triangle(x1,y1,x2,y2,x3,y3);
                }
            else if (x == 2)
            {
                  cout << "Введіть координати чотирьох точок"<<endl;
                  cout << "Введіть x1 ="; cin >> x1;cout <<endl;
                  cout << "Введіть y1 ="; cin >> y1;cout <<endl;
                  cout << "Введіть x2 ="; cin >> x2;cout <<endl;
                  cout << "Введіть y2 ="; cin >> y2;cout <<endl;
                  cout << "Введіть x3 ="; cin >> x3;cout <<endl;
                  cout << "Введіть y3 ="; cin >> y3;cout <<endl;
                  cout << "Введіть x4 ="; cin >> x4;cout <<endl;
                  cout << "Введіть y4 ="; cin >> y4;cout <<endl;
                       figur = new Parallelogram(x1,y1,x2,y2,x3,y3,x4,y4);

            }
            else if (x == 3)
            {
                  cout << "Введіть координати п'яти точок"<<endl;
                  cout << "Введіть x1 ="; cin >> x1;cout <<endl;
                  cout << "Введіть y1 ="; cin >> y1;cout <<endl;
                  cout << "Введіть x2 ="; cin >> x2;cout <<endl;
                  cout << "Введіть y2 ="; cin >> y2;cout <<endl;
                  cout << "Введіть x3 ="; cin >> x3;cout <<endl;
                  cout << "Введіть y3 ="; cin >> y3;cout <<endl;
                  cout << "Введіть x4 ="; cin >> x4;cout <<endl;
                  cout << "Введіть y4 ="; cin >> y4;cout <<endl;
                  cout << "Введіть x5 ="; cin >> x5;cout <<endl;
                  cout << "Введіть y5 ="; cin >> y5;cout <<endl;
                       figur = new Pkutnuk(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5);

            }
            else if (x == 4)
            {     
                  cout << "Введіть координати центру та радіус"<<endl;
                  cout << "Введіть x ="; cin >> x1;cout <<endl;
                  cout << "Введіть y ="; cin >> y1;cout <<endl;
                  cout << "Введіть радіус r =";cin >> x2;cout <<endl;
                     figur = new Circle(x1,y1,x2);
            }
  
  return figur;
}

void showfigure(Figure* figur)
   {
     double p,a;
     string t,v;
     vector<double> m;
                       cout <<"Інформація про фігуру"<<endl;
                       cout <<"====================="<<endl;

                       cout << "\nSquare: ";
                       a = figur->calc_area();
                       cout << a <<endl;
                       cout << "Периметр: ";
                       p =figur->calc_perimeter();
                       cout << p <<endl;
                       cout <<"Тип: ";
                       t =figur->calc_type();
                       cout << t <<endl;
                       cout << "Спеціальна точка: ";
                       m = figur->calc_specdot();
                       cout << "M( ";
                       for(int i = 0;i < m.size();i++)
                         {
                           cout << m[i]<<" ";
                         }
                        cout <<")"<<endl;                     
                       cout <<"Опуклість: ";
                       v = figur->calc_vyp();
                       cout << v <<endl;
                
   }
};

int main() 
{

   
     Figure** figure = new Figure*[1];
     Check f1;
     figure[1] = f1.insert(figure[1]);
     f1.showfigure(figure[1]);
  
     delete figure[1];
     

    return 0;
}
