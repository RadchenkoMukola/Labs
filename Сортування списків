#include <bits/stdc++.h>
using namespace std;

typedef struct Node
{
  int  data;
  Node *next;
}Listn, *Listp;

Listp Head(int n)
{
  Listp p,q = NULL;
  for(int i = 0;i < n;i++)
  {
    int x;
    cin >> x;
    p = new Listn;
    p->data = x;
    p->next = q;
    q = p;
  }
  return p;
}
void printlist(Listp root)
{
  while(root)
  {
    cout << root -> data << " ";
    root = root->next;
  }
}

void del(Listp head)
{
  Listp p;
  while(head)
  {
    p = head;
    head = head->next;
    delete p;
  }
}

int maxel(Listp head)
{
  Listp p = head;
  int x = -100000;
  while(p)
  {
    if(p->data > x)
    {
      x = p->data;
    }
    p = p-> next;
  }
  return x;
}

int minel(Listp head)
{
  Listp p = head;
  int x = 1000000;
  while(p)
  {
    if(p->data < x)
    {
      x = p->data;
    }
    p = p-> next;
  }
  return x;
}

void quicksortel(Listp head)
{
  Listp p;
    Node *left = head;                 
    Node *right = head->next;  

    Node *temp = new Node;        
         
 
    while (left->next){                 
            while (right){              
                    if ((left->data) < (right->data)){        
                        temp->data = left->data;              
                        left->data = right->data;            
                        right->data = temp->data;            
                    }
                right = right->next;                 
            }
        left = left->next;                            
        right = left->next;                             
    }
  
}

void sortedInsert(struct Node** head_ref, Listp new_node) 
{ 
    Listp current; 
    if (*head_ref == NULL || (*head_ref)->data >= new_node->data) 
    { 
        new_node->next = *head_ref; 
        *head_ref = new_node; 
    } 
    else
    { 
        current = *head_ref; 
        while (current->next!=NULL && 
               current->next->data < new_node->data) 
        { 
            current = current->next; 
        } 
        new_node->next = current->next; 
        current->next = new_node; 
    } 
}

void insertionsortel(struct Node **head_ref) 
{ 
    Listp sorted = NULL; 
    Listp current = *head_ref; 
    while (current != NULL) 
    { 
        Listp next = current->next; 
        sortedInsert(&sorted, current); 
        current = next; 
    } 
  
    *head_ref = sorted; 
} 

Listp merge(Listp h1, Listp h2)
{
	Listp t1 = new Node;
	Listp t2 = new Node;
	Listp temp = new Node;
 
	if(h1 == NULL)
		return h2;
 
	if(h2 == NULL)
		return h1;
 
	t1 = h1;
 
	while (h2 != NULL)
	{

		t2 = h2;
		h2 = h2->next;
		t2->next = NULL;
 

		if(h1->data > t2->data)
		{
			t2->next = h1;
			h1 = t2;
			t1 = h1;
			continue;
		}
 
		flag:
		if(t1->next == NULL)
		{
			t1->next = t2;
			t1 = t1->next;
		}
		else if((t1->next)->data <= t2->data)
		{
			t1 = t1->next;
			goto flag;
		}
		else
		{

			temp = t1->next;
			t1->next = t2;
			t2->next = temp;
		}
	}
 

	return h1;
}
 
 

void mergesortel(Node **head)
{
	Listp first = new Node;
	Listp second = new Node;
	Listp temp = new Node;
	first = *head;
	temp = *head;

	if(first == NULL || first->next == NULL)
	{
		return;
	}
	else
	{
		while(first->next != NULL)
		{
			first = first->next;
			if(first->next != NULL)
			{
				temp = temp->next;
				first = first->next;
			}
		}
		second = temp->next;
		temp->next = NULL;
		first = *head;
	}
 
	mergesortel(&first);
	mergesortel(&second);
   
	*head = merge(first, second);
}

Listp countingsortel(Listp linklist)
{
  Listp root = linklist;

  int max = maxel(linklist);
  int min = minel(linklist);

  int counts[max + 1];
  

  while(root->next){
    counts[root->data - min] += 1;
    root = root->next;
  }

   int i = 0;
   root = linklist;
   printlist(root);
   Listp q = NULL;
   while(root->next)
   {
     if(counts[i] == 0)   
       ++i;
     else{
       root->data = i;
       --counts[i];
       root = root->next;
     }
   }
  return linklist;
}

Listp reverse(Listp list)
{
  Listp reversed_list = NULL;

  for (Listp node = list, next_node; node != NULL; node = next_node)
  {
    next_node = node->next;
    node->next = reversed_list;
    reversed_list = node;
  }

  return reversed_list;
}


int main()
{
  int a[100];
  int n = 0;
  cout << "Введіть розмір списку-";
  cin >> n;
  cout <<endl;
  Listp p = NULL;
  cout << "Введіть елементи списку"<<endl;
  p = Head(n);
  /*p = countingsortel(p);*/

  char func;
  char func1;
    do
    {
        cout << "*====================*" << endl;
        cout << "*l      Меню        l*" << endl;
        cout << "*====================*" << endl;
        cout << "*l 1.quicksort      l*" << endl;
        cout << "*l 2.mergesort      l*" << endl;
        cout << "*l 3.insertionsort  l*" << endl;
        cout << "*====================*" << endl;


        cout << "Вибір -";
        cin >> func;
        cout << endl;

        if (func == '1')
        {
          cout << "*====================*" << endl;
          cout << "*l      Меню        l*" << endl;
          cout << "*====================*" << endl;
          cout << "*l 1.Зростання      l*" << endl;
          cout << "*l 2.Спадання       l*" << endl;
          cout << "*====================*" << endl;
          cout << "Вибір -";
          cin >> func1;
          cout << endl;
          if(func1 == '1')
          {
              quicksortel(p);
              Listp a = reverse(p);
              printlist(a);
              return 0;
          }
          if(func1 == '2')
          {
            quicksortel(p);
            printlist(p);
            return 0;
          }
        }
        if (func == '2')
        {
          cout << "*====================*" << endl;
          cout << "*l      Меню        l*" << endl;
          cout << "*====================*" << endl;
          cout << "*l 1.Зростання      l*" << endl;
          cout << "*l 2.Спадання       l*" << endl;
          cout << "*====================*" << endl;
          cout << "Вибір -";
          cin >> func1;
          cout << endl;
          if(func1 == '1')
          {
              mergesortel(&p);
              printlist(p);
              return 0;
          }
          if(func1 == '2')
          {
            mergesortel(&p);
            Listp a = reverse(p);
            printlist(a);
            return 0;
          }
        }
        if (func == '3')
        {
          cout << "*====================*" << endl;
          cout << "*l      Меню        l*" << endl;
          cout << "*====================*" << endl;
          cout << "*l 1.Зростання      l*" << endl;
          cout << "*l 2.Спадання       l*" << endl;
          cout << "*====================*" << endl;
          cout << "Вибір -";
          cin >> func1;
          cout << endl;
          if(func1 == '1')
          {
              insertionsortel(&p);
              printlist(p);
              return 0;
          }
          if(func1 == '2')
          {
            insertionsortel(&p);
            Listp a = reverse(p);
            printlist(a);
            return 0;
          }
        }       
    } while (true);

  return 0;
  
}
